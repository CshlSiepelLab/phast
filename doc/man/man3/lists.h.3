lists.h File Reference.TH "lists.h" 3 "11 Oct 2006" "Version v0.9b" "PHAST" \" -*- nroff -*-
.ad l
.nh
.SH NAME
lists.h \- Simple array-based lists and supporting functions. 
.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBlst_struct\fP"
.br
.RI "\fIBasic List object. \fP"
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBorder_t\fP { \fBASCENDING\fP, \fBDESCENDING\fP }"
.br
.RI "\fIList sorting. \fP"
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBlst_qsort_int\fP (\fBList\fP *l, \fBorder_t\fP ord)"
.br
.RI "\fISort list of integers using qsort. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Simple array-based lists and supporting functions. 

Supports storage of objects of arbitrary size. Convenience functions are available for common data types such as ints, doubles, and pointers. The 'stacks' and 'queues' libraries are layered on top of this one. Use these lists when memory locality is important or when you need to access elements by index; use linked-lists instead when (mid-list) insertions and deletions are important.
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBorder_t\fP"
.PP
List sorting. 
.PP
\fBEnumeration values: \fP
.in +1c
.TP
\fB\fIASCENDING \fP\fP
sort in ascending order 
.TP
\fB\fIDESCENDING \fP\fP
sort in descending order 
.SH "Author"
.PP 
Generated automatically by Doxygen for PHAST from the source code.
