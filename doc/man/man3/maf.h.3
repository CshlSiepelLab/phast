.TH "maf.h" 3 "22 Jun 2004" "PHAST" \" -*- nroff -*-
.ad l
.nh
.SH NAME
maf.h \- Reading of alignments from MAF ('Multiple Alignment Format') files, as produced by MULTIZ and TBA. 
.SH SYNOPSIS
.br
.PP
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBMSA\fP * \fBmaf_read\fP (FILE *F, FILE *REFSEQF, int tuple_size, \fBGFF_Set\fP *gff, \fBCategoryMap\fP *cm, int cycle_size, int store_order, char *reverse_groups, int gap_strip_mode)"
.br
.RI "\fIRead an alignment from a MAF file.\fP"
.ti -1c
.RI "int \fBmaf_read_block\fP (FILE *F, \fBMSA\fP *mini_msa, Hashtable *name_hash, int *start_idx, int *length)"
.br
.RI "\fIRead a block from an MAF file and store it as a 'mini-msa' using the provided object.\fP"
.ti -1c
.RI "\fBMSA\fP * \fBmaf_read_next_msa\fP (FILE *F)"
.br
.RI "\fIReads a block from an MAF file and returns it as a new \fBMSA\fP object.\fP"
.in -1c
.SH "DETAILED DESCRIPTION"
.PP 
Reading of alignments from MAF ('Multiple Alignment Format') files, as produced by MULTIZ and TBA.
.PP
 (See http://www.bx.psu.edu/miller_lab.) These functions are primarily concerned with extracting sufficient statistics from a MAF file (see sufficient_stats.c). They avoid representing the alignment explicitly, and as a result allow large MAF files (e.g., spanning whole mammalian chromosomes) to be read and stored fairly efficiently. A 'reference sequence' alignment is currently assumed, with the reference sequence appearing first in each alignment block, and always in the positive (rather than reverse complemented) orientation (this is the convention with MULTIZ).
.PP
.SH "FUNCTION DOCUMENTATION"
.PP 
.SS "\fBMSA\fP* maf_read (FILE * F, FILE * REFSEQF, int tuple_size, \fBGFF_Set\fP * gff, \fBCategoryMap\fP * cm, int cycle_size, int store_order, char * reverse_groups, int gap_strip_mode)"
.PP
Read an alignment from a MAF file.
.PP
The alignment won't be constructed explicitly; instead, a sufficient-statistics representation will be extracted directly from the MAF. Blocks corresponding to overlapping segments of the reference sequence are permitted, but all except the first one will be discarded. 
.SS "int maf_read_block (FILE * F, \fBMSA\fP * mini_msa, Hashtable * name_hash, int * start_idx, int * length)"
.PP
Read a block from an MAF file and store it as a 'mini-msa' using the provided object.
.PP
Allocates memory for sequences if they are NULL (as with first block). Reads to next 'a' line or EOF. Returns EOF when no more alignments are available. Sets start coord and length of reference sequence if non-NULL pointers are provided. Uses provided hash to map sequence names to sequence indices (prefix of name wrt '.' character); sequences not present in a block will be represented by gap characters. 
.SS "\fBMSA\fP* maf_read_next_msa (FILE * F)"
.PP
Reads a block from an MAF file and returns it as a new \fBMSA\fP object.
.PP
Reads to next 'a' line or EOF. Returns NULL when no more alignments are available. This is a slightly less efficient but simpler and more flexible version of maf_read_block. 
.SH "AUTHOR"
.PP 
Generated automatically by Doxygen for PHAST from the source code.
